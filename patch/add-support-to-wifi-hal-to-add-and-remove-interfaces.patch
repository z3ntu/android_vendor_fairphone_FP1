diff --git a/wifi/Android.mk b/wifi/Android.mk
index 51afe3a..201f573 100644
--- a/wifi/Android.mk
+++ b/wifi/Android.mk
@@ -43,6 +43,16 @@ ifdef WIFI_EXT_MODULE_NAME
 LOCAL_CFLAGS += -DWIFI_EXT_MODULE_NAME=\"$(WIFI_EXT_MODULE_NAME)\"
 endif
 
+ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+LOCAL_CFLAGS += -DWIFI_DRIVER_STATE_CTRL_PROP_NAME=\"$(WIFI_DRIVER_STATE_CTRL_PROP_NAME)\"
+endif
+ifdef WIFI_DRIVER_STATE_ON
+LOCAL_CFLAGS += -DWIFI_DRIVER_STATE_ON=\"$(WIFI_DRIVER_STATE_ON)\"
+endif
+ifdef WIFI_DRIVER_STATE_OFF
+LOCAL_CFLAGS += -DWIFI_DRIVER_STATE_OFF=\"$(WIFI_DRIVER_STATE_OFF)\"
+endif
+
 LOCAL_SRC_FILES += wifi/wifi.c
 
 ifeq ($(BOARD_HAVE_SAMSUNG_WIFI),true)
diff --git a/wifi/wifi.c b/wifi/wifi.c
index dacef5e..3798722 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -133,6 +133,9 @@ static const char DRIVER_MODULE_AP_ARG[] = WIFI_DRIVER_MODULE_AP_ARG;
 #endif
 static const char FIRMWARE_LOADER[]     = WIFI_FIRMWARE_LOADER;
 static const char DRIVER_PROP_NAME[]    = "wlan.driver.status";
+#ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+static const char DRIVER_STATE_CTRL_RESULT_PROP_NAME[] = "wlan.iface.ctrl.status";
+#endif
 static const char SUPPLICANT_NAME[]     = "wpa_supplicant";
 static const char SUPP_PROP_NAME[]      = "init.svc.wpa_supplicant";
 static const char P2P_SUPPLICANT_NAME[] = "p2p_supplicant";
@@ -251,6 +254,62 @@ const char *get_dhcp_error_string() {
     return dhcp_lasterror();
 }
 
+#ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+// wait_for_property was copied from system/core/libnetutils/dhcp_utils.c from
+// AOSP, commit b1723b6892.
+
+// Wait for 100ms at a time when polling for property values.
+static const int NAP_TIME = 100;
+
+static int wait_for_property(const char *name, const char *desired_value, int maxwait) {
+    char value[PROPERTY_VALUE_MAX] = {'\0'};
+    int maxnaps = (maxwait * 1000) / NAP_TIME;
+
+    if (maxnaps < 1) {
+        maxnaps = 1;
+    }
+
+    while (maxnaps-- > 0) {
+        usleep(NAP_TIME * 1000);
+        if (property_get(name, value, NULL)) {
+            if (desired_value == NULL ||
+                    strcmp(value, desired_value) == 0) {
+                return 0;
+            }
+        }
+    }
+    return -1; /* failure */
+}
+
+int wifi_change_driver_state(const char* state) {
+    char service_cmd[PROPERTY_VALUE_MAX];
+    int maximum_wait = 5;
+
+    snprintf(service_cmd, sizeof(service_cmd), "%s:%s %s", WIFI_DRIVER_STATE_CTRL_PROP_NAME, state, DRIVER_STATE_CTRL_RESULT_PROP_NAME);
+
+    // Clean previous value.
+    if (property_set(DRIVER_STATE_CTRL_RESULT_PROP_NAME, "starting") < 0) {
+        ALOGW("Failed to clean previous value of property '%s'", DRIVER_STATE_CTRL_RESULT_PROP_NAME);
+    }
+
+    if (property_set("ctl.start", service_cmd) < 0) {
+        ALOGE("Failed to start service '%s'", service_cmd);
+
+        return -1;
+    }
+
+    if (wait_for_property(DRIVER_STATE_CTRL_RESULT_PROP_NAME, "ok", maximum_wait) < 0) {
+        ALOGE("Failed to get 'ok' result in less than %d seconds from service '%s' to change driver state", maximum_wait, service_cmd);
+
+        property_set(DRIVER_STATE_CTRL_RESULT_PROP_NAME, "timeout");
+
+        return -1;
+    }
+
+    return 0;
+}
+#endif
+
 int is_wifi_driver_loaded() {
     char driver_status[PROPERTY_VALUE_MAX];
 #ifdef WIFI_DRIVER_MODULE_PATH
@@ -331,6 +390,11 @@ int wifi_load_driver()
 #ifdef WIFI_DRIVER_LOADER_DELAY
         usleep(WIFI_DRIVER_LOADER_DELAY);
 #endif
+#ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+        if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0) {
+            return -1;
+        }
+#endif
         property_set(DRIVER_PROP_NAME, "ok");
     }
     else {
@@ -352,6 +416,12 @@ int wifi_load_driver()
     wifi_unload_driver();
     return -1;
 #else
+#ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+    if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0) {
+        return -1;
+    }
+#endif
+
     property_set(DRIVER_PROP_NAME, "ok");
     return 0;
 #endif
@@ -379,6 +449,12 @@ int wifi_unload_driver()
     } else
         return -1;
 #else
+#ifdef WIFI_DRIVER_STATE_CTRL_PROP_NAME
+    if (wifi_change_driver_state(WIFI_DRIVER_STATE_OFF) < 0) {
+        return -1;
+    }
+#endif
+
     property_set(DRIVER_PROP_NAME, "unloaded");
     return 0;
 #endif
